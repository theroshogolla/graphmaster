# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MMExPZD_nbzCT7HP6MIGZcIHdfeUbgbb
"""

import io
import chess
import chess.pgn
import pandas as pd
from tqdm import tqdm
import networkx as nx
from copy import deepcopy
import matplotlib.pyplot as plt

FPATH = 'all_with_filtered_anotations_since1998.txt'
df = pd.read_csv(FPATH, engine='python', skiprows=4, sep='###')

df = df.reset_index()
df[['id', 'Date', 'Result', 'welo' ,'belo', 'len', 'date_c', 'resu_c', 'welo_c', 'belo_c',
    'edate_c', 'setup', 'fen', 'resu2_c', 'oyrange', 'bad_len']] = df['index'].str.split(' ', expand=True).iloc[:,:-1]
df['moves'] = df.iloc[:,1]
df['moves'] = df['moves'].str.replace('[WB]\d+?\.', '', regex=True)
df = df.iloc[:,2:].set_index('id')


def support_network(game):
    # Load the PGN game
    board = deepcopy(game.board())
    graphs = []
    # Iterate through each move in the main line
    for move in game.mainline_moves():
        board.push(move)

        # Create a directed graph for this board position
        graph = nx.DiGraph()

        # Iterate through each piece on the board and add a node to the graph
        for square in chess.SQUARES:
            piece = board.piece_at(square)
            if piece is not None:
                graph.add_node(str(square), piece=piece.symbol())

        # Iterate through each pair of pieces and add a directed edge if the first piece can attack or defend the second piece
        for from_square in chess.SQUARES:
            from_piece = board.piece_at(from_square)
            if from_piece is None:
                continue

            for to_square in board.attackers(from_piece.color, from_square):
                to_piece = board.piece_at(to_square)

                # If the pieces have the same color, add a defense edge
                if from_piece.color == to_piece.color:
                    graph.add_edge(str(from_square), str(to_square), type='defense')

                # If the pieces have different colors, add an attack edge
                else:
                    graph.add_edge(str(from_square), str(to_square), type='attack')
        graphs.append(graph)
        
    return graphs
        
                        
def draw_graph(graph):
    pos = nx.spring_layout(graph)
    nx.draw(graph, pos, with_labels=True, font_weight='bold')
    labels = nx.get_edge_attributes(graph, 'type')
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=labels)
    plt.show()
    
support_networks = []
for i in tqdm(range(len(df))):
    if(type(df.iloc[i]['moves']) != str):
        continue
    moves = io.StringIO(df.iloc[i]['moves'])
    game = chess.pgn.read_game(moves)
    game.headers.update(df.iloc[i].drop('moves', inplace=False))
    graphs = support_network(game)
    support_networks.append(graphs)